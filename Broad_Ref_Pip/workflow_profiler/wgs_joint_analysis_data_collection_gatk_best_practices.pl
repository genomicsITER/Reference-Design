#!/usr/bin/perl 
###########################################################
# Data Collection Script for GATK Best Practices Pipeline #
###########################################################

if (scalar(@ARGV) < 5) {
    die("Usage: SampleName NumThreads InputDataDirectory TempOutputDirectory profiling \n[if profiling is enabled, then the following is required]: collectstatspath interval stats \n");
}
my $sample =  $ARGV[0];
my $numThreads = $ARGV[1];
my $inDataDir = $ARGV[2];
my $tmpDir = "".$ARGV[3];

my $profiling = $ARGV[4]; #by default profiling is turned ON if invoked from the workflow profiler

# arguments for collect_stats
my $collectstatspath = $ARGV[5];
my $interval = $ARGV[6]; # by default sampling interval is 30s from the workflow profiler.
my $stats = $ARGV[7];

#my $numLanes =$ARGV[1];
my $called = "$0 @ARGV";

my $numLanes = 0;
my $sampleprefix = $sample.'_'.$numThreads.'T';

# INPUT VCF LIST FILE
# This file contains a list of all the gVCF files generated by HaplotypeCaller.
my $vcf_list;
#$vcf_list = $inDataDir.$sample.".g.vcf";  #passing one g.vcf file
$vcf_list = $inDataDir.$sample.".list"; #passing foo.list with paths to multiple g.vcf

# Pipeline executables and its directories
### ENTER THE CORRECT PATH TO THE FOLLOWING 3 VARIABLES ###
my $broadDir = '/cluster_share/tools';
my $homosapiensrefgenomeDir = '/cluster_share/data/reference/b37bundle';

# TOOLS
my $bwaDir = "$broadDir/bwa";
my $bwa = "$bwaDir/bwa";
my $gatkDir = "$broadDir/gatk-protected/target";
my $gatk = "$gatkDir/GenomeAnalysisTK.jar";
#my $gatk = "$broadDir/gatk3.6/GenomeAnalysisTK.jar"; #gatk3.6
my $picardDir ="$broadDir/picard/dist";
my $picard = "$picardDir/picard.jar";

# HOMOSAPIENSREFGENOME
my $refgenomeFastaFile = "$homosapiensrefgenomeDir/human_g1k_v37.fasta";
my $dbSNPvcf = "$homosapiensrefgenomeDir/dbsnp_138.b37.vcf";
my $hapmap = "$homosapiensrefgenomeDir/hapmap_3.3.b37.vcf";
my $omni = "$homosapiensrefgenomeDir/1000G_omni2.5.b37.vcf";
my $phase1_snp = "$homosapiensrefgenomeDir/1000G_phase1.snps.high_confidence.b37.vcf";
my $mills = "$homosapiensrefgenomeDir/Mills_and_1000G_gold_standard.indels.b37.vcf";

#my $dbsnp138 = "$homosapiensrefgenomeDir/dbsnp_138.b37.vcf"; #*********Removeable?
#my $axiom_exome_plus = "$homosapiensrefgenomeDir/?"; #************For exomes
#my $dbSNPindel = "$homosapiensrefgenomeDir/Mills_and_1000G_gold_standard.indels.b37.vcf"; #*****Removealbe?
#my $refgenomeBwtFile = "$homosapiensrefgenomeDir/?.fasta.bwt";


# EXOME TARGET INTERVALS
my $exome_targets_intervals = "$homosapiensrefgenomeDir/nexterarapidcapture_exome_uniqueintervals.bed";
unless(-d $inDataDir) {
    die("Error: The InputDataDirectory $inDataDir doesn't exist\n");
}

unless(-d $tmpDir) {
    die("Error: The TempOutputDirectory $tmpDir doesn't exist\n");
}

# Output file names for each stage of the pipeline
my $baseName = $sample;
my $raw_calls = $tmpDir.$baseName.".raw.calls.vcf";
my $preFiltered_calls = $tmpDir.$baseName.".preFiltered.calls.vcf";
my $genomeImportFile = $refgenomeFastaFile.".fai";  #Removable?
my $readGroupHeader = "\@RG\\tID:$baseNameLane\\tLB:$baseName\\tSM:$baseName\\tPL:ILLUMINA";
my $recal_SNP = $tmpDir.$baseName."_snps.recal";
my $tranches_SNP = $tmpDir.$baseName."_snps.tranches";
my $recal_snps_vcf = $tmpDir.$baseName."_recal_snps.vcf";
my $recal_indel = $tmpDir.$baseName."_indels.recal";
my $tranches_indel = $tmpDir.$baseName."_indels.tranches";
my $recal_calls_vcf = $tmpDir.$baseName."_recal_calls.vcf";

my $dryRun = 0;

my $pwd = `pwd`;
chomp $pwd;
my $host = `hostname`;
chomp $host;
my $uname = `whoami`;
chomp $uname;
my $runningTime = time;
my $commandsfile = $tmpDir.$uname."_".$sampleprefix."_processing.log";
my $commandsfile = $tmpDir.$uname."_".$sampleprefix."_processing.log";
my $outputfile = $tmpDir.$uname."_".$sampleprefix."_output.log";
open(LOG,">$commandsfile");
print LOG "#$called (version $version) in $pwd on $host.\n";
print LOG "#Started at ".`date +"%F %T"`."\n";
print LOG "#temporary files created in $tmpDir\n";
my $procTime = time;
my $procFlag = 0;
sub run_and_log {
    my $command = $_[0];
    my $execute = !$dryRun;
    my $exitValue = 0; #a command we don't run is considered successful
    my $redirect;

    if (@_ >1){
	$execute=!$_[1];
    }

#several of the programs like to output to STDERR, so we link that to log file
    $redirect = "1>>$outputfile 2>&1";
#that is because we redirect STDOUT in many cases, so let's not mess with it.
    $redirect = "2>>$outputfile" if $command =~ m/>/;
#    $redirect = "" if $command =~ m/>/;

    $command = $command." ".$redirect;

    if ($procFlag == 0){
	$procFlag++;
    } else {
	$procTime = time - $procTime;
	printf LOG "#Processing Time %02d:%02d:%02d\n",int($procTime /3600),int(($procTime % 3600) /60),int($procTime %60);
	$procTime = time;
    }

    print LOG "#not run\n" if !$execute;
    print LOG "#".`date +"%F %T"`;
    print LOG $command."\n";

    $exitValue = system($command) if $execute;

#necessary if we use `` instead of system()
#$exitValue = $? >>8;

##If the command failed, we want to stop it here.
    if ($exitValue != 0){
	my $error = "Command failed with return value $exitValue : $command \n";
	print LOG $error;
	close LOG;
	die $error;
    }
}

#############
# Profiling #
#############
sub Start_profiling {
my ($tag) = @_;
if ($profiling) { 
system("$collectstatspath $stats -d $interval -td $tmpDir -n $sampleprefix -tag $tag -l 5 -u 1 -s 600 &");
}
}

sub Stop_Profiling {
if ($profiling) { 
system("$collectstatspath --kill-all");
}
}

##########################################
# STAGES OF GATK BEST PRACTICES PIPELINE # 
##########################################
my $stage_tag=GenotypeGVCFs;
Start_profiling($stage_tag);
print "$stage_tag\n";
run_and_log "java -Xmx100g -Djava.io.tmpdir=$tmpDir -jar $gatk -T GenotypeGVCFs -nt $numThreads -R $refgenomeFastaFile -D $dbSNPvcf -V $vcf_list -o $raw_calls";
Stop_Profiling();
sleep(60);

my $stage_tag=VarFilter;
Start_profiling($stage_tag);
print "$stage_tag\n";
run_and_log "java -Djava.io.tmpdir=$tmpDir -jar $gatk -T VariantFiltration -R $refgenomeFastaFile -V $raw_calls --filterExpression \"InbreedingCoeff < -0.3\" --filterName \"InbreedingCoeff\" -o $preFiltered_calls";
Stop_Profiling();
sleep(60);

my $stage_tag=VarRecalSNP;
Start_profiling($stage_tag);
print "$stage_tag\n";
run_and_log "java -Djava.io.tmpdir=$tmpDir -jar $gatk -T VariantRecalibrator -nt $numThreads -R $refgenomeFastaFile -input $preFiltered_calls -recalFile $recal_SNP -tranchesFile $tranches_SNP -allPoly -tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.8 -tranche 99.6 -tranche 99.5 -tranche 99.4 -tranche 99.3 -tranche 99.0 -tranche 98.0 -tranche 97.0 -tranche 90.0 -an QD -an MQRankSum -an ReadPosRankSum -an FS -an MQ -an SOR -resource:hapmap,known=false,training=true,truth=true,prior=15 $hapmap -resource:omni,known=false,training=true,truth=true,prior=12 $omni -resource:1000G,known=false,training=true,truth=false,prior=10 $phase1_snp -resource:dbsnp138,known=true,training=false,truth=false,prior=7 $dbSNPvcf --maxGaussians 6 -mode SNP";
Stop_Profiling();
sleep(60);

my $stage_tag=ApplyRecalSNP;
Start_profiling($stage_tag);
run_and_log "java -Djava.io.tmpdir=$tmpDir -jar $gatk -T ApplyRecalibration -nt $numThreads -R $refgenomeFastaFile -input $preFiltered_calls -recalFile $recal_SNP -tranchesFile $tranches_SNP -ts_filter_level 99.6 -mode SNP -o $recal_snps_vcf";
Stop_Profiling();
sleep(60);

my $stage_tag=VarRecalIndel;
Start_profiling($stage_tag);
print "$stage_tag\n";
run_and_log "java -Djava.io.tmpdir=$tmpDir -jar $gatk -T VariantRecalibrator -nt $numThreads -R $refgenomeFastaFile -input $recal_snps_vcf -recalFile $recal_indel -tranchesFile $tranches_indel -allPoly -tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.5 -tranche 99.0 -tranche 97.0 -tranche 96.0 -tranche 95.0 -tranche 94.0 -tranche 93.5 -tranche 93.0 -tranche 92.0 -tranche 91.0 -tranche 90.0 -an FS -an ReadPosRankSum -an MQRankSum -an QD -an SOR -resource:mills,known=false,training=true,truth=true,prior=12 $mills -resource:dbsnp138,known=true,training=false,truth=false,prior=2 $dbSNPvcf --maxGaussians 6 -mode INDEL";
Stop_Profiling();
sleep(60);

my $stage_tag=ApplyRecalIndel;
Start_profiling($stage_tag);
print "$stage_tag\n";
run_and_log "java -Djava.io.tmpdir=$tmpDir -jar $gatk -T ApplyRecalibration -nt $numThreads -R $refgenomeFastaFile -input $recal_snps_vcf -recalFile $recal_indel -tranchesFile $tranches_indel -ts_filter_level 95.0 -mode INDEL -o $recal_calls_vcf";
Stop_Profiling();
sleep(60);

$runningTime = time - $runningTime;

printf LOG "#done in %02d:%02d:%02d\n",int($runningTime /3600),int(($runningTime % 3600) /60),int($runningTime %60);

exit 0;
